name: Agent Communication Framework CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.6.1"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run type checking with MyPy
      run: |
        poetry run mypy framework/agent_communication/core/ --strict
    
    - name: Run linting with Ruff
      run: |
        poetry run ruff check framework/ tests/
    
    - name: Run formatting check with Black
      run: |
        poetry run black --check framework/ tests/
    
    - name: Run tests with pytest
      run: |
        poetry run pytest tests/ --cov=framework --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  validate-schemas:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Validate YAML schemas
      run: |
        poetry run python -c "
        import yaml
        import sys
        from pathlib import Path
        
        schema_dir = Path('framework/schemas')
        for schema_file in schema_dir.glob('*.yml'):
            try:
                with open(schema_file) as f:
                    yaml.safe_load(f)
                print(f'✅ {schema_file.name} is valid YAML')
            except Exception as e:
                print(f'❌ {schema_file.name} failed validation: {e}')
                sys.exit(1)
        "
    
    - name: Validate agent communication schema
      run: |
        poetry run python framework/validators/validator.py doc framework/docs/agent_onboarding.md framework/
    
    - name: Test enhanced protocol CLI
      run: |
        cd framework/agent_communication/core
        poetry run python enhanced_protocol.py --help

  validate-documentation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run framework documentation validation
      run: |
        chmod +x framework/scripts/validate.sh
        ./framework/scripts/validate.sh --self_validate
    
    - name: Check for broken links in documentation
      run: |
        poetry run python -c "
        import re
        from pathlib import Path
        
        # Simple broken link checker for markdown files
        doc_files = list(Path('framework/docs').rglob('*.md'))
        
        for doc_file in doc_files:
            content = doc_file.read_text()
            # Check for relative links
            links = re.findall(r'\[.*?\]\((.*?)\)', content)
            for link in links:
                if link.startswith('http'):
                    continue  # Skip external links for now
                link_path = doc_file.parent / link
                if not link_path.exists():
                    print(f'❌ Broken link in {doc_file}: {link}')
                else:
                    print(f'✅ Valid link in {doc_file}: {link}')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run security scan with bandit
      run: |
        poetry add --group dev bandit[toml]
        poetry run bandit -r framework/ -f json -o bandit-report.json || true
        poetry run bandit -r framework/ --severity-level medium
    
    - name: Check for hardcoded secrets
      run: |
        # Simple secret detection
        if grep -r "password\|secret\|key\|token" framework/ --include="*.py" | grep -v "# pragma: allowlist secret"; then
          echo "❌ Potential hardcoded secrets found"
          exit 1
        else
          echo "✅ No hardcoded secrets detected"
        fi
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, validate-schemas, validate-documentation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Test agent communication end-to-end
      run: |
        # Test enhanced protocol CLI
        cd framework/agent_communication/core
        
        # Test sending a message
        poetry run python enhanced_protocol.py \
          --agent-id test_agent_ci \
          --environment development \
          send \
          --type test_request \
          --content '{"test_type": "unit", "test_file": "tests/test_ci.py", "parameters": {"environment": "development", "verbose": true}}'
        
        # Test reading messages
        poetry run python enhanced_protocol.py \
          --agent-id test_agent_ci \
          --environment development \
          read
        
        # Test validation
        poetry run python enhanced_protocol.py \
          --agent-id test_agent_ci \
          --environment development \
          validate
        
        # Test cleanup
        poetry run python enhanced_protocol.py \
          --agent-id test_agent_ci \
          --environment development \
          cleanup --days 1
    
    - name: Test workflow message types
      run: |
        cd framework/agent_communication/core
        
        # Test workflow request
        poetry run python enhanced_protocol.py \
          --agent-id workflow_test_agent \
          --environment development \
          send \
          --type workflow_request \
          --content '{"workflow_name": "test_workflow", "steps": [{"name": "step1", "action": "validate"}], "parameters": {}}'
        
        # Test validation request
        poetry run python enhanced_protocol.py \
          --agent-id validation_test_agent \
          --environment development \
          send \
          --type validation_request \
          --content '{"validation_type": "schema", "target_files": ["framework/schemas/*.yml"]}'

  performance-test:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
        poetry add --group dev pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        poetry run python -c "
        import time
        import json
        from pathlib import Path
        import sys
        sys.path.append('framework/agent_communication/core')
        
        from models import create_message, MessageType
        from enhanced_protocol import EnhancedAgentProtocol
        
        # Benchmark message creation
        start = time.time()
        for i in range(1000):
            message = create_message(
                sender=f'perf_agent_{i}',
                message_type=MessageType.STATUS_UPDATE,
                content={
                    'agent_id': f'perf_agent_{i}',
                    'state': 'busy',
                    'progress': 50.0
                }
            )
        end = time.time()
        
        creation_time = (end - start) * 1000  # Convert to milliseconds
        print(f'Message creation benchmark: {creation_time:.2f}ms for 1000 messages')
        print(f'Average: {creation_time/1000:.4f}ms per message')
        
        # Fail if performance is too slow (more than 1ms per message on average)
        if creation_time/1000 > 1.0:
            print('❌ Performance regression detected')
            sys.exit(1)
        else:
            print('✅ Performance benchmark passed')
        "

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Generate coverage report
      run: |
        poetry run pytest tests/ --cov=framework --cov-report=html --cov-report=json
    
    - name: Upload coverage to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: htmlcov/
    
    - name: Check coverage threshold
      run: |
        poetry run python -c "
        import json
        with open('coverage.json') as f:
            coverage_data = json.load(f)
        
        total_coverage = coverage_data['totals']['percent_covered']
        print(f'Total coverage: {total_coverage:.1f}%')
        
        if total_coverage < 90:
            print('❌ Coverage below 90% threshold')
            exit(1)
        else:
            print('✅ Coverage threshold met')
        "